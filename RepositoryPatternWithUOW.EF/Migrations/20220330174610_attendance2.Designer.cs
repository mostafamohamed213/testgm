// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RepositoryPatternWithUOW.Core.Models;

namespace RepositoryPatternWithUOW.EF.Migrations
{
    [DbContext(typeof(WMSContext))]
    [Migration("20220330174610_attendance2")]
    partial class attendance2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("pgcrypto")
                .HasAnnotation("Relational:Collation", "Arabic_Saudi Arabia.1256")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.AttendanceStatus", b =>
                {
                    b.Property<int>("AttendanceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("attendance_status_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("AttendanceStatusId");

                    b.HasIndex(new[] { "Name" }, "attendance_status_name_key")
                        .IsUnique();

                    b.ToTable("attendance_status", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.AuthenticationProvider", b =>
                {
                    b.Property<int>("AuthenticationProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("authentication_provider_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Library")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("library");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("AuthenticationProviderId");

                    b.HasIndex(new[] { "Name" }, "authentication_provider_name_key")
                        .IsUnique();

                    b.ToTable("authentication_provider", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.AuthenticationProviderParameter", b =>
                {
                    b.Property<int>("AuthenticationProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("authentication_provider_id");

                    b.Property<string>("Parameter")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("parameter");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("value");

                    b.HasKey("AuthenticationProviderId", "Parameter")
                        .HasName("authentication_provider_parameter_pkey");

                    b.ToTable("authentication_provider_parameter", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("brand_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("BrandId");

                    b.HasIndex(new[] { "Name" }, "brand_name_key")
                        .IsUnique();

                    b.ToTable("brand", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.CapitalType", b =>
                {
                    b.Property<int>("CapitalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("capital_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("CapitalTypeId");

                    b.HasIndex(new[] { "Name" }, "capital_type_name_key")
                        .IsUnique();

                    b.ToTable("capital_type", "geo");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.CodeType", b =>
                {
                    b.Property<int>("CodeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("CodeTypeId");

                    b.HasIndex(new[] { "Name" }, "code_type_name_key")
                        .IsUnique();

                    b.ToTable("code_type", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Configuration", b =>
                {
                    b.Property<string>("ConfigurationCode")
                        .HasMaxLength(5)
                        .HasColumnType("character(5)")
                        .HasColumnName("configuration_code")
                        .IsFixedLength(true);

                    b.Property<int>("ConfigurationCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("configuration_category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("SecurityHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character(40)")
                        .HasColumnName("security_hash")
                        .IsFixedLength(true);

                    b.Property<string>("Value")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("value");

                    b.HasKey("ConfigurationCode", "ConfigurationCategoryId")
                        .HasName("configuration_pkey");

                    b.HasIndex("ConfigurationCategoryId");

                    b.ToTable("configuration", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ConfigurationCategory", b =>
                {
                    b.Property<int>("ConfigurationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("configuration_category_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentConfigurationCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_configuration_category_id");

                    b.HasKey("ConfigurationCategoryId");

                    b.HasIndex("ParentConfigurationCategoryId");

                    b.HasIndex(new[] { "Name" }, "configuration_category_name_key")
                        .IsUnique();

                    b.ToTable("configuration_category", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ConstraintType", b =>
                {
                    b.Property<int>("ConstraintTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("constraint_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("ConstraintTypeId");

                    b.HasIndex(new[] { "Name" }, "constraint_type_name_key")
                        .IsUnique();

                    b.ToTable("constraint_type", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.CostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cost_center_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Systemusercrate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("value");

                    b.HasKey("CostCenterId");

                    b.HasIndex(new[] { "Name" }, "cost_center_name_key")
                        .IsUnique();

                    b.ToTable("cost_center", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "Name" }, "country_name_key")
                        .IsUnique();

                    b.ToTable("country", "geo");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Dictionary", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint")
                        .HasColumnName("page_id");

                    b.Property<string>("String")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("string");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("value");

                    b.HasKey("LanguageId", "PageId", "String")
                        .HasName("dictionary_pkey");

                    b.HasIndex("PageId");

                    b.ToTable("dictionary", "dic");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Division", b =>
                {
                    b.Property<long>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("division_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CapitalTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("capital_type_id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentDivisionId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_division_id");

                    b.HasKey("DivisionId");

                    b.HasIndex("CapitalTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentDivisionId");

                    b.ToTable("division", "geo");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.DivisionHierarchy", b =>
                {
                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint")
                        .HasColumnName("division_id");

                    b.Property<int?>("DivisionLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("division_level_id");

                    b.Property<long?>("ParentDivisionId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_division_id");

                    b.ToTable("division_hierarchy", "geo");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.DivisionLevel", b =>
                {
                    b.Property<int>("DivisionLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("division_level_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("DivisionLevelId", "CountryId")
                        .HasName("division_level_pkey");

                    b.HasIndex(new[] { "CountryId", "Name" }, "division_level_country_id_name_key")
                        .IsUnique();

                    b.ToTable("division_level", "geo");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("entity_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("EntityId");

                    b.HasIndex(new[] { "Name" }, "entity_name_key")
                        .IsUnique();

                    b.ToTable("entity", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItem", b =>
                {
                    b.Property<long>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Code")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("code");

                    b.Property<int?>("CodeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("code_type_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("numeric");

                    b.Property<int>("InventoryItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_status_id");

                    b.Property<int>("InventoryItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_id");

                    b.Property<int?>("InventoryLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_id");

                    b.Property<string>("IssueNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("issue_number");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("notes");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("quantity");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("serial_number");

                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("unit_cost");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer")
                        .HasColumnName("vendor_id");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("CodeTypeId");

                    b.HasIndex("InventoryItemStatusId");

                    b.HasIndex("InventoryItemTypeId");

                    b.HasIndex("InventoryLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SystemUserId");

                    b.HasIndex("VendorId");

                    b.HasIndex(new[] { "SerialNumber", "LocationId" }, "inventory_item_serial_number_location_id_key")
                        .IsUnique();

                    b.ToTable("inventory_item", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemAssignment", b =>
                {
                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("object_id");

                    b.Property<DateTime>("AssignmentDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assignment_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("quantity");

                    b.HasKey("InventoryItemId", "ObjectId", "AssignmentDts")
                        .HasName("inventory_item_assignment_pkey");

                    b.ToTable("inventory_item_assignment", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemCategory", b =>
                {
                    b.Property<int>("InventoryItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_category_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentInventoryItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_inventory_item_category_id");

                    b.HasKey("InventoryItemCategoryId");

                    b.HasIndex("ParentInventoryItemCategoryId");

                    b.HasIndex(new[] { "Name", "ParentInventoryItemCategoryId" }, "inventory_item_category_name_parent_inventory_item_category_key")
                        .IsUnique();

                    b.ToTable("inventory_item_category", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemCategoryBrand", b =>
                {
                    b.Property<int>("InventoryItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_category_id");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.HasKey("InventoryItemCategoryId", "BrandId")
                        .HasName("inventory_item_category_brand_pkey");

                    b.HasIndex("BrandId");

                    b.ToTable("inventory_item_category_brand", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemCategoryStructure", b =>
                {
                    b.Property<int?>("InventoryItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_category_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.ToTable("inventory_item_category_structure", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemHistory", b =>
                {
                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<DateTime>("StartDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_dts");

                    b.Property<DateTime?>("EndDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_dts");

                    b.Property<long>("MaintenanceItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_item_id");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("InventoryItemId", "StartDts")
                        .HasName("inventory_item_history_pkey");

                    b.HasIndex("MaintenanceItemId");

                    b.HasIndex("VehicleId");

                    b.ToTable("inventory_item_history", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemLevel", b =>
                {
                    b.Property<int?>("InventoryItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_id");

                    b.Property<int?>("InventoryLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_id");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.ToTable("inventory_item_level", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemReservation", b =>
                {
                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<long>("ReservingObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("reserving_object_id");

                    b.Property<DateTime>("ReservingDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reserving_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("ReservedQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("reserved_quantity");

                    b.HasKey("InventoryItemId", "ReservingObjectId", "ReservingDts")
                        .HasName("inventory_item_reservation_pkey");

                    b.ToTable("inventory_item_reservation", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemStatus", b =>
                {
                    b.Property<int>("InventoryItemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_status_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("InventoryItemStatusId");

                    b.HasIndex(new[] { "Name" }, "inventory_item_status_name_key")
                        .IsUnique();

                    b.ToTable("inventory_item_status", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemStatusInventoryItemType", b =>
                {
                    b.Property<int>("InventoryItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_status_id");

                    b.Property<int>("InventoryItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_id");

                    b.HasKey("InventoryItemStatusId", "InventoryItemTypeId")
                        .HasName("inventory_item_status_inventory_item_type_pkey");

                    b.HasIndex("InventoryItemTypeId");

                    b.ToTable("inventory_item_status_inventory_item_type", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemStatusLog", b =>
                {
                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<DateTime>("StatusDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("status_dts");

                    b.Property<int>("InventoryItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_status_id");

                    b.HasKey("InventoryItemId", "StatusDts", "InventoryItemStatusId")
                        .HasName("inventory_item_status_log_pkey");

                    b.HasIndex("InventoryItemStatusId");

                    b.ToTable("inventory_item_status_log", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemType", b =>
                {
                    b.Property<int>("InventoryItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AutoGenerateSerial")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_generate_serial");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("cost_center_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("'0001-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<int>("InventoryItemTypeClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_classification_id");

                    b.Property<int?>("InventoryItemTypeUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_unit_id");

                    b.Property<int?>("InventoryitemcategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventoryitemcategory_id");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuantitative")
                        .HasColumnType("boolean")
                        .HasColumnName("is_quantitative");

                    b.Property<int?>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("PathImage")
                        .HasColumnType("text");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("integer");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("InventoryItemTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("InventoryItemTypeClassificationId");

                    b.HasIndex("InventoryItemTypeUnitId");

                    b.HasIndex("InventoryitemcategoryId");

                    b.HasIndex("ModelId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("inventory_item_type", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeClassification", b =>
                {
                    b.Property<int>("InventoryItemTypeClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_classification_id")
                        .HasDefaultValueSql("nextval('inv.inventory_item_type_classific_inventory_item_type_classific_seq'::regclass)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("InventoryItemTypeClassificationId");

                    b.HasIndex(new[] { "Name" }, "inventory_item_type_classification_name_key")
                        .IsUnique();

                    b.ToTable("inventory_item_type_classification", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeUnit", b =>
                {
                    b.Property<int>("InventoryItemTypeUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_unit_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("InventoryItemTypeUnitId");

                    b.HasIndex(new[] { "Name" }, "inventory_item_type_unit_name_key")
                        .IsUnique();

                    b.ToTable("inventory_item_type_unit", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocation", b =>
                {
                    b.Property<int>("InventoryLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InventoryLocationLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_level_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentInventoryLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_inventory_location_id");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("InventoryLocationId");

                    b.HasIndex("InventoryLocationLevelId");

                    b.HasIndex("ParentInventoryLocationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("inventory_location", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocationLevel", b =>
                {
                    b.Property<int>("InventoryLocationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_level_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentInventoryLocationLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_inventory_location_level_id");

                    b.Property<string>("StructureName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("structure_name");

                    b.HasKey("InventoryLocationLevelId");

                    b.HasIndex("ParentInventoryLocationLevelId");

                    b.ToTable("inventory_location_level", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocationStructure", b =>
                {
                    b.Property<int?>("InventoryLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_id");

                    b.Property<int?>("InventoryLocationLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_level_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.ToTable("inventory_location_structure", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLog", b =>
                {
                    b.Property<long>("InventoryLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("InventoryLogID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDT")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDT");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("InventoryLogOperationID")
                        .HasColumnType("integer")
                        .HasColumnName("InventoryLogOperationID");

                    b.Property<int>("InventoryLogTableID")
                        .HasColumnType("integer")
                        .HasColumnName("InventoryLogTableID");

                    b.Property<string>("Object1")
                        .HasColumnType("text");

                    b.Property<string>("Object2")
                        .HasColumnType("text");

                    b.Property<string>("Object3")
                        .HasColumnType("text");

                    b.Property<long>("ObjectID")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectID");

                    b.Property<string>("SystemUserID")
                        .HasColumnType("text")
                        .HasColumnName("SystemUserID");

                    b.HasKey("InventoryLogID");

                    b.HasIndex(new[] { "InventoryLogOperationID" }, "IX_inventory_log_InventoryLogOperationID");

                    b.HasIndex(new[] { "InventoryLogTableID" }, "IX_inventory_log_InventoryLogTableID");

                    b.ToTable("inventory_log", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLogOperation", b =>
                {
                    b.Property<int>("InventoryLogOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("InventoryLogOperationID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InventoryLogOperationId");

                    b.HasIndex(new[] { "OperationName" }, "IX_inventory_log_operation_OperationName")
                        .IsUnique();

                    b.ToTable("inventory_log_operation", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLogTable", b =>
                {
                    b.Property<int>("InventoryLogTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("InventoryLogTableID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InventoryLogTableId");

                    b.HasIndex(new[] { "TableName" }, "IX_inventory_log_table_TableName")
                        .IsUnique();

                    b.ToTable("inventory_log_table", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryTransaction", b =>
                {
                    b.Property<long>("InventoryTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_transaction_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FromLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_location_id");

                    b.Property<long?>("ObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("object_id");

                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<long>("ToLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_location_id");

                    b.HasKey("InventoryTransactionId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("SystemUserId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("inventory_transaction", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryTransactionDetail", b =>
                {
                    b.Property<long>("InventoryTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_transaction_id");

                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<int>("InventoryItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_status_id");

                    b.Property<decimal?>("Quantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("quantity");

                    b.HasKey("InventoryTransactionId", "InventoryItemId")
                        .HasName("inventory_transaction_detail_pkey");

                    b.HasIndex("InventoryItemStatusId");

                    b.ToTable("inventory_transaction_detail", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("language_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<bool>("Rtl")
                        .HasColumnType("boolean")
                        .HasColumnName("rtl");

                    b.HasKey("LanguageId");

                    b.HasIndex(new[] { "Name" }, "language_name_key")
                        .IsUnique();

                    b.ToTable("language", "dic");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("location_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("LocationObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_object_id");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("location_type_id");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex(new[] { "LocationObjectId", "LocationTypeId" }, "location_location_object_id_location_type_id_key")
                        .IsUnique();

                    b.ToTable("location", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LocationType", b =>
                {
                    b.Property<int>("LocationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("location_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("LocationTypeId");

                    b.HasIndex(new[] { "Name" }, "location_type_name_key")
                        .IsUnique();

                    b.ToTable("location_type", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Log", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("log_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LogActionId")
                        .HasColumnType("integer")
                        .HasColumnName("log_action_id");

                    b.Property<int>("LogCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("log_category_id");

                    b.Property<DateTime>("LogDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("log_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("LogStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("log_status_id");

                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.HasKey("LogId");

                    b.HasIndex("LogActionId");

                    b.HasIndex("LogCategoryId");

                    b.HasIndex("LogStatusId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("log", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogAction", b =>
                {
                    b.Property<int>("LogActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_action_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("LogActionId");

                    b.HasIndex(new[] { "Name" }, "log_action_name_key")
                        .IsUnique();

                    b.ToTable("log_action", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogCategory", b =>
                {
                    b.Property<int>("LogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_category_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentLogCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_log_category_id");

                    b.HasKey("LogCategoryId");

                    b.HasIndex("ParentLogCategoryId");

                    b.HasIndex(new[] { "Name" }, "log_category_name_key")
                        .IsUnique();

                    b.ToTable("log_category", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogDetail", b =>
                {
                    b.Property<long>("LogId")
                        .HasColumnType("bigint")
                        .HasColumnName("log_id");

                    b.Property<string>("Parameter")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("parameter");

                    b.Property<string>("Value")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("value");

                    b.HasKey("LogId", "Parameter")
                        .HasName("log_detail_pkey");

                    b.ToTable("log_detail", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogStatus", b =>
                {
                    b.Property<int>("LogStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_status_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("LogStatusId");

                    b.HasIndex(new[] { "Name" }, "log_status_name_key")
                        .IsUnique();

                    b.ToTable("log_status", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Maintenance", b =>
                {
                    b.Property<long>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MaintenanceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_type_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("notes");

                    b.Property<long>("WorkOrderNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("work_order_number");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("WorkOrderNumber");

                    b.HasIndex("WorkshopId");

                    b.ToTable("maintenance", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", b =>
                {
                    b.Property<int>("MaintenanceActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("MaintenanceActionId");

                    b.HasIndex("WorkshopId");

                    b.HasIndex(new[] { "Name" }, "maintenance_action_name_key")
                        .IsUnique();

                    b.ToTable("maintenance_action", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionControl", b =>
                {
                    b.Property<int>("MaintenanceActionId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_id");

                    b.Property<int>("VehicleFamilyId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_family_id");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("boolean")
                        .HasColumnName("scheduled");

                    b.HasKey("MaintenanceActionId", "VehicleFamilyId", "Scheduled")
                        .HasName("maintenance_action_control_pkey");

                    b.HasIndex("VehicleFamilyId");

                    b.ToTable("maintenance_action_control", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionDetail", b =>
                {
                    b.Property<int>("MaintenanceActionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_detail_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MaintenanceActionId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("MaintenanceActionDetailId");

                    b.HasIndex(new[] { "MaintenanceActionId", "Name" }, "maintenance_action_detail_maintenance_action_id_name_key")
                        .IsUnique();

                    b.ToTable("maintenance_action_detail", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionTechnicianPosition", b =>
                {
                    b.Property<int>("MaintenanceActionId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_id");

                    b.Property<int>("TechnicianPositionId")
                        .HasColumnType("integer")
                        .HasColumnName("technician_position_id");

                    b.HasKey("MaintenanceActionId", "TechnicianPositionId")
                        .HasName("maintenance_action_technician_position_pkey");

                    b.HasIndex("TechnicianPositionId");

                    b.ToTable("maintenance_action_technician_position", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceFleet", b =>
                {
                    b.Property<int>("MaintenanceFleetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_fleet_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("MaintenanceFleetId");

                    b.HasIndex(new[] { "Name" }, "maintenance_fleet_name_key")
                        .IsUnique();

                    b.ToTable("maintenance_fleet", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", b =>
                {
                    b.Property<long>("MaintenanceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_item_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean")
                        .HasColumnName("checked");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("comments");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Failure")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("failure");

                    b.Property<int?>("MaintenanceActionDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_detail_id");

                    b.Property<int?>("MaintenanceActionId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_action_id");

                    b.Property<long>("MaintenanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_id");

                    b.Property<int>("MaintenanceItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_item_status_id");

                    b.Property<int>("MaintenanceItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_item_type_id");

                    b.Property<long?>("RelatedMaintenanceItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_maintenance_item_id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Task")
                        .HasColumnType("character varying")
                        .HasColumnName("task");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer")
                        .HasColumnName("technician_id");

                    b.HasKey("MaintenanceItemId");

                    b.HasIndex("MaintenanceActionDetailId");

                    b.HasIndex("MaintenanceActionId");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("MaintenanceItemStatusId");

                    b.HasIndex("MaintenanceItemTypeId");

                    b.HasIndex("RelatedMaintenanceItemId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("maintenance_item", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemInventoryItem", b =>
                {
                    b.Property<long>("MaintenanceItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_item_id");

                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("quantity");

                    b.HasKey("MaintenanceItemId", "InventoryItemId")
                        .HasName("maintenance_item_inventory_item_pkey");

                    b.ToTable("maintenance_item_inventory_item", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemStatus", b =>
                {
                    b.Property<int>("MaintenanceItemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_item_status_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("MaintenanceItemStatusId");

                    b.HasIndex("WorkshopId");

                    b.HasIndex(new[] { "Name", "WorkshopId" }, "maintenance_item_status_name_workshop_id_key")
                        .IsUnique();

                    b.ToTable("maintenance_item_status", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemType", b =>
                {
                    b.Property<int>("MaintenanceItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_item_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("MaintenanceItemTypeId");

                    b.HasIndex(new[] { "Name" }, "maintenance_item_type_name_key")
                        .IsUnique();

                    b.ToTable("maintenance_item_type", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceQuestion", b =>
                {
                    b.Property<int>("MaintenanceQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_question_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("MaintenanceQuestionId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("maintenance_question", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceQuestionValue", b =>
                {
                    b.Property<int>("MaintenanceQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_question_id");

                    b.Property<long>("MaintenanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_id");

                    b.Property<string>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value");

                    b.HasKey("MaintenanceQuestionId", "MaintenanceId")
                        .HasName("maintenance_question_value_pkey");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("maintenance_question_value", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceType", b =>
                {
                    b.Property<int>("MaintenanceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("MaintenanceTypeId");

                    b.HasIndex(new[] { "Name" }, "maintenance_type_name_key")
                        .IsUnique();

                    b.ToTable("maintenance_type", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("model_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex(new[] { "Name", "BrandId" }, "model_name_brand_id_key")
                        .IsUnique();

                    b.ToTable("model", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Page", b =>
                {
                    b.Property<long>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("page_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("PageId");

                    b.HasIndex(new[] { "Name" }, "page_name_key")
                        .IsUnique();

                    b.ToTable("page", "dic");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Parameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("parameter_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean")
                        .HasColumnName("is_optional");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_type_id");

                    b.HasKey("ParameterId");

                    b.HasIndex("ParameterTypeId");

                    b.HasIndex(new[] { "Name" }, "parameter_name_key")
                        .IsUnique();

                    b.ToTable("parameter", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterConstraint", b =>
                {
                    b.Property<int>("ParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_id");

                    b.Property<int>("ConstraintTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("constraint_type_id");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("value");

                    b.HasKey("ParameterId", "ConstraintTypeId")
                        .HasName("parameter_constraint_pkey");

                    b.HasIndex("ConstraintTypeId");

                    b.ToTable("parameter_constraint", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterEntity", b =>
                {
                    b.Property<int>("ParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_id");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entity_id");

                    b.HasKey("ParameterId", "EntityId")
                        .HasName("parameter_entity_pkey");

                    b.HasIndex("EntityId");

                    b.ToTable("parameter_entity", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterListValue", b =>
                {
                    b.Property<long>("ParameterListValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("parameter_list_value_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_id");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("value");

                    b.HasKey("ParameterListValueId");

                    b.HasIndex(new[] { "ParameterId", "Value" }, "parameter_list_value_parameter_id_value_key")
                        .IsUnique();

                    b.ToTable("parameter_list_value", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterType", b =>
                {
                    b.Property<int>("ParameterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("parameter_type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("ParameterTypeId");

                    b.HasIndex(new[] { "Name" }, "parameter_type_name_key")
                        .IsUnique();

                    b.ToTable("parameter_type", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterTypeConstraintType", b =>
                {
                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_type_id");

                    b.Property<int>("ConstraintTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("constraint_type_id");

                    b.HasKey("ParameterTypeId", "ConstraintTypeId")
                        .HasName("parameter_type_constraint_type_pkey");

                    b.HasIndex("ConstraintTypeId");

                    b.ToTable("parameter_type_constraint_type", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterValue", b =>
                {
                    b.Property<int>("ParameterValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("parameter_value_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("object_id");

                    b.Property<int>("ParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_id");

                    b.Property<string>("Value")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("value");

                    b.HasKey("ParameterValueId");

                    b.HasIndex("ParameterId");

                    b.ToTable("parameter_value", "ece");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("permission_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("PermissionId");

                    b.ToTable("permission", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.PermissionParameter", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<string>("Parameter")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("parameter");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("value");

                    b.HasKey("PermissionId", "Parameter")
                        .HasName("permission_parameter_pkey");

                    b.ToTable("permission_parameter", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Schedule", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreateSystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("create_system_user_id");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.Property<DateTime>("VisitDts")
                        .HasColumnType("date")
                        .HasColumnName("visit_dts");

                    b.HasKey("ScheduleId");

                    b.HasIndex(new[] { "VehicleId", "VisitDts" }, "schedule_vehicle_id_visit_dts_key")
                        .IsUnique();

                    b.ToTable("schedule", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SecurityGroup", b =>
                {
                    b.Property<int>("SecurityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("security_group_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("SecurityGroupId");

                    b.HasIndex(new[] { "Name" }, "security_group_name_key")
                        .IsUnique();

                    b.ToTable("security_group", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SecurityGroupPermission", b =>
                {
                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("security_group_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("SecurityGroupId", "PermissionId")
                        .HasName("security_group_permission_pkey");

                    b.HasIndex("PermissionId");

                    b.ToTable("security_group_permission", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shift_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("ShiftId");

                    b.HasIndex(new[] { "Name" }, "shift_name_key")
                        .IsUnique();

                    b.ToTable("shift", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUser", b =>
                {
                    b.Property<long>("SystemUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuthenticationProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("authentication_provider_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("email");

                    b.Property<int>("FailedAttemptsCount")
                        .HasColumnType("integer")
                        .HasColumnName("failed_attempts_count");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LockDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lock_dts");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character(40)")
                        .HasColumnName("password")
                        .IsFixedLength(true);

                    b.Property<bool>("PasswordChanged")
                        .HasColumnType("boolean")
                        .HasColumnName("password_changed");

                    b.Property<bool>("RestrictTerminals")
                        .HasColumnType("boolean")
                        .HasColumnName("restrict_terminals");

                    b.Property<int>("UserCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("user_category_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("SystemUserId");

                    b.HasIndex("AuthenticationProviderId");

                    b.HasIndex("UserCategoryId");

                    b.HasIndex(new[] { "Username", "AuthenticationProviderId" }, "system_user_username_authentication_provider_id_key")
                        .IsUnique();

                    b.ToTable("system_user", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserLanguage", b =>
                {
                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.HasKey("SystemUserId")
                        .HasName("system_user_language_pkey");

                    b.HasIndex("LanguageId");

                    b.ToTable("system_user_language", "dic");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserPermission", b =>
                {
                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_granted");

                    b.HasKey("SystemUserId", "PermissionId")
                        .HasName("system_user_permission_pkey");

                    b.HasIndex("PermissionId");

                    b.ToTable("system_user_permission", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserSecurityGroup", b =>
                {
                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("security_group_id");

                    b.HasKey("SystemUserId", "SecurityGroupId")
                        .HasName("system_user_security_group_pkey");

                    b.HasIndex("SecurityGroupId");

                    b.ToTable("system_user_security_group", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserTerminal", b =>
                {
                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<int>("TerminalId")
                        .HasColumnType("integer")
                        .HasColumnName("terminal_id");

                    b.HasKey("SystemUserId", "TerminalId")
                        .HasName("system_user_terminal_pkey");

                    b.HasIndex("TerminalId");

                    b.ToTable("system_user_terminal", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("technician_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Contact1")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("contact1");

                    b.Property<string>("Contact2")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("contact2");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("cost_center_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean")
                        .HasColumnName("enable");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character(14)")
                        .HasColumnName("national_id")
                        .IsFixedLength(true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Systemusercrate")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("systemusercrate");

                    b.Property<string>("TechnicianCompanyEmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("technician_company_employee_id");

                    b.Property<int>("TechnicianCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("technician_company_id");

                    b.Property<int>("TechnicianPositionId")
                        .HasColumnType("integer")
                        .HasColumnName("technician_position_id");

                    b.HasKey("TechnicianId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("TechnicianCompanyId");

                    b.HasIndex("TechnicianPositionId");

                    b.ToTable("technician", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianAttendance", b =>
                {
                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer")
                        .HasColumnName("technician_id");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("event_date");

                    b.Property<int>("AttendanceStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("attendance_status_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<TimeSpan?>("InTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("in_time");

                    b.Property<TimeSpan?>("OutTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("out_time");

                    b.Property<int>("ShiftId")
                        .HasColumnType("integer")
                        .HasColumnName("shift_id");

                    b.Property<string>("Systemusercrate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TechnicianId", "EventDate")
                        .HasName("technician_attendance_pkey");

                    b.HasIndex("AttendanceStatusId");

                    b.HasIndex("ShiftId");

                    b.ToTable("technician_attendance", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianAttendanceLog", b =>
                {
                    b.Property<long>("TechnicianAttendanceLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttendanceStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDts")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("Object")
                        .HasColumnType("text");

                    b.Property<int>("ShiftId")
                        .HasColumnType("integer");

                    b.Property<string>("Systemusercrate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicianAttendanceStatusLogId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("TechnicianAttendanceLogId");

                    b.HasIndex("AttendanceStatusId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TechnicianAttendanceStatusLogId");

                    b.HasIndex("TechnicianId", "EventDate");

                    b.ToTable("technicianA_attendance_log", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianAttendanceStatusLog", b =>
                {
                    b.Property<int>("TechnicianAttendanceStatusLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TechnicianAttendanceStatusLogId");

                    b.ToTable("technicianA_attendance_status_log", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianCompany", b =>
                {
                    b.Property<int>("TechnicianCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("technician_company_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("TechnicianCompanyId");

                    b.HasIndex(new[] { "Name" }, "technician_company_name_key")
                        .IsUnique();

                    b.ToTable("technician_company", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianPosition", b =>
                {
                    b.Property<int>("TechnicianPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("technician_position_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("SystemUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TechnicianPositionId");

                    b.HasIndex(new[] { "Name" }, "technician_position_name_key")
                        .IsUnique();

                    b.ToTable("technician_position", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Terminal", b =>
                {
                    b.Property<int>("TerminalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("terminal_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Hostname")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("hostname");

                    b.Property<string>("Ip")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ip");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.HasKey("TerminalId");

                    b.ToTable("terminal", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TireCondition", b =>
                {
                    b.Property<int>("TireConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tire_condition_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("TireConditionId");

                    b.HasIndex(new[] { "Name" }, "tire_condition_name_key")
                        .IsUnique();

                    b.ToTable("tire_condition", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TireSize", b =>
                {
                    b.Property<int>("TireSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tire_size_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("TireSizeId");

                    b.HasIndex(new[] { "Name" }, "tire_size_name_key")
                        .IsUnique();

                    b.ToTable("tire_size", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TireStatus", b =>
                {
                    b.Property<int>("TireStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tire_status_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("TireStatusId");

                    b.HasIndex(new[] { "Name" }, "tire_status_name_key")
                        .IsUnique();

                    b.ToTable("tire_status", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TireTest", b =>
                {
                    b.Property<long>("TireTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tire_test_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<long>("MaintenanceItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_item_id");

                    b.Property<decimal>("Psi")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("psi");

                    b.Property<int>("TireConditionId")
                        .HasColumnType("integer")
                        .HasColumnName("tire_condition_id");

                    b.Property<decimal>("TireTreadDepthA")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_a");

                    b.Property<decimal>("TireTreadDepthB")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_b");

                    b.Property<decimal>("TireTreadDepthC")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_c");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("TireTestId");

                    b.HasIndex("MaintenanceItemId");

                    b.HasIndex("VehicleId");

                    b.ToTable("tire_test", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.UserCategory", b =>
                {
                    b.Property<int>("UserCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_category_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentUserCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_user_category_id");

                    b.HasKey("UserCategoryId");

                    b.HasIndex("ParentUserCategoryId");

                    b.HasIndex(new[] { "Name" }, "user_category_name_key")
                        .IsUnique();

                    b.ToTable("user_category", "slc");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AttachedVehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("attached_vehicle_id");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("capacity");

                    b.Property<string>("ChassisSerial")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("chassis_serial");

                    b.Property<string>("ChassisType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("chassis_type");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("cost_center_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EngineSerial")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("engine_serial");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("engine_type");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufacturing_year");

                    b.Property<string>("Notes")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("notes");

                    b.Property<int>("TireSizeId")
                        .HasColumnType("integer")
                        .HasColumnName("tire_size_id");

                    b.Property<int>("TiresCount")
                        .HasColumnType("integer")
                        .HasColumnName("tires_count");

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_brand_id");

                    b.Property<int>("VehicleDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_department_id");

                    b.Property<int>("VehicleFamilyId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_family_id");

                    b.Property<int>("VehicleOwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_owner_id");

                    b.Property<int>("VehicleStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_status_id");

                    b.HasKey("VehicleId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("TireSizeId");

                    b.HasIndex("VehicleBrandId");

                    b.HasIndex("VehicleDepartmentId");

                    b.HasIndex("VehicleFamilyId");

                    b.HasIndex("VehicleOwnerId");

                    b.HasIndex("VehicleStatusId");

                    b.HasIndex(new[] { "AttachedVehicleId" }, "vehicle_attached_vehicle_id_key")
                        .IsUnique();

                    b.ToTable("vehicle", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleArea", b =>
                {
                    b.Property<int>("VehicleAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_area_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("VehicleAreaId");

                    b.HasIndex(new[] { "Name" }, "vehicle_area_name_key")
                        .IsUnique();

                    b.ToTable("vehicle_area", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleAttachment", b =>
                {
                    b.Property<long>("VehicleAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_attachment_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AttachedVehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("attached_vehicle_id");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("VehicleAttachmentId");

                    b.HasIndex("AttachedVehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_attachment", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleBrand", b =>
                {
                    b.Property<int>("VehicleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_brand_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("VehicleFamilyId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_family_id");

                    b.HasKey("VehicleBrandId");

                    b.HasIndex("VehicleFamilyId");

                    b.HasIndex(new[] { "Name", "VehicleFamilyId" }, "vehicle_brand_name_vehicle_family_id_key")
                        .IsUnique();

                    b.ToTable("vehicle_brand", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleCurrentTire", b =>
                {
                    b.Property<string>("Brand")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("brand");

                    b.Property<long?>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<string>("InventoryItemStatus")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("inventory_item_status");

                    b.Property<string>("Pattern")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("pattern");

                    b.Property<decimal?>("Pressure")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("pressure");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("serial_number");

                    b.Property<string>("StandardTreadDepth")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("standard_tread_depth");

                    b.Property<DateTime?>("StartDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_dts");

                    b.Property<int?>("TirePosition")
                        .HasColumnType("integer")
                        .HasColumnName("tire_position");

                    b.Property<decimal?>("TireTreadDepthA")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_a");

                    b.Property<decimal?>("TireTreadDepthB")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_b");

                    b.Property<decimal?>("TireTreadDepthC")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_c");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.ToTable("vehicle_current_tire", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleDepartment", b =>
                {
                    b.Property<int>("VehicleDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_department_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(265)
                        .HasColumnType("character varying(265)")
                        .HasColumnName("name");

                    b.HasKey("VehicleDepartmentId");

                    b.ToTable("vehicle_department", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleFamily", b =>
                {
                    b.Property<int>("VehicleFamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_family_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentVehicleFamilyId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_vehicle_family_id");

                    b.HasKey("VehicleFamilyId");

                    b.HasIndex("ParentVehicleFamilyId");

                    b.HasIndex(new[] { "Name", "ParentVehicleFamilyId" }, "vehicle_family_name_parent_vehicle_family_id_key")
                        .IsUnique();

                    b.ToTable("vehicle_family", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleLicense", b =>
                {
                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("license_number");

                    b.HasKey("VehicleId", "StartDate")
                        .HasName("vehicle_license_pkey");

                    b.ToTable("vehicle_license", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleOwner", b =>
                {
                    b.Property<int>("VehicleOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_owner_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int?>("VehicleDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_department_id");

                    b.HasKey("VehicleOwnerId");

                    b.HasIndex("VehicleDepartmentId");

                    b.ToTable("vehicle_owner", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleStatus", b =>
                {
                    b.Property<int>("VehicleStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_status_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("VehicleStatusId");

                    b.HasIndex(new[] { "Name" }, "vehicle_status_name_key")
                        .IsUnique();

                    b.ToTable("vehicle_status", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleTire", b =>
                {
                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("TirePosition")
                        .HasColumnType("integer")
                        .HasColumnName("tire_position");

                    b.Property<DateTime>("StartDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_dts");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("EndDts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_dts");

                    b.Property<long>("InventoryItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_item_id");

                    b.Property<long?>("MaintenanceItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_item_id");

                    b.Property<decimal>("Pressure")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("pressure");

                    b.Property<decimal>("TireTreadDepthA")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_a");

                    b.Property<decimal>("TireTreadDepthB")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_b");

                    b.Property<decimal>("TireTreadDepthC")
                        .HasPrecision(18, 5)
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("tire_tread_depth_c");

                    b.HasKey("VehicleId", "TirePosition", "StartDts")
                        .HasName("vehicle_tire_pkey");

                    b.HasIndex("MaintenanceItemId");

                    b.HasIndex(new[] { "InventoryItemId" }, "ix_vehicle_tire_1")
                        .IsUnique()
                        .HasFilter("(end_dts IS NULL)");

                    b.ToTable("vehicle_tire", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vendor_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("VendorId");

                    b.HasIndex(new[] { "Name" }, "vendor_name_key")
                        .IsUnique();

                    b.ToTable("vendor", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Warehouse", b =>
                {
                    b.Property<long>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanBroadcast")
                        .HasColumnType("boolean")
                        .HasColumnName("can_broadcast");

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint")
                        .HasColumnName("division_id");

                    b.Property<int?>("InventoryLocationLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_location_level_id");

                    b.Property<bool?>("IsEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("WarehouseId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("InventoryLocationLevelId");

                    b.HasIndex(new[] { "Name" }, "warehouse_name_key")
                        .IsUnique();

                    b.ToTable("warehouse", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WarehouseInventoryItemTypeClassification", b =>
                {
                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.Property<int>("InventoryItemTypeClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_item_type_classification_id");

                    b.HasKey("WarehouseId", "InventoryItemTypeClassificationId")
                        .HasName("warehouse_inventory_item_type_classification_pkey");

                    b.HasIndex("InventoryItemTypeClassificationId");

                    b.ToTable("warehouse_inventory_item_type_classification", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WarehousePermission", b =>
                {
                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.Property<long>("TargetWarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_warehouse_id");

                    b.HasKey("WarehouseId", "TargetWarehouseId")
                        .HasName("warehouse_permission_pkey");

                    b.HasIndex("TargetWarehouseId");

                    b.ToTable("warehouse_permission", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WarehouseStructure", b =>
                {
                    b.Property<string>("Structure")
                        .HasColumnType("text")
                        .HasColumnName("structure");

                    b.Property<int?>("StructureId")
                        .HasColumnType("integer")
                        .HasColumnName("structure_id");

                    b.Property<string>("StructureName")
                        .HasColumnType("text")
                        .HasColumnName("structure_name");

                    b.ToTable("warehouse_structure", "inv");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkOrder", b =>
                {
                    b.Property<long>("WorkOrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("work_order_number")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_dts")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsAccident")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accident");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_finished");

                    b.Property<int>("MaintenanceFleetId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_fleet_id");

                    b.Property<decimal>("Mileage")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("mileage");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<long>("SystemUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_user_id");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("WorkOrderNumber")
                        .HasName("work_order_pkey");

                    b.HasIndex("MaintenanceFleetId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("work_order", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkOrderWorkshop", b =>
                {
                    b.Property<long>("WorkOrderNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("work_order_number");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.Property<int?>("Done")
                        .HasColumnType("integer")
                        .HasColumnName("done");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("Pending")
                        .HasColumnType("integer")
                        .HasColumnName("pending");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<int?>("TotalFinding")
                        .HasColumnType("integer")
                        .HasColumnName("total_finding");

                    b.HasKey("WorkOrderNumber", "WorkshopId")
                        .HasName("work_order_workshop_pkey");

                    b.HasIndex("WorkshopId");

                    b.ToTable("work_order_workshop", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Workshop", b =>
                {
                    b.Property<int>("WorkshopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Library")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("library");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("WorkshopId");

                    b.HasIndex(new[] { "Name" }, "workshop_name_key")
                        .IsUnique();

                    b.ToTable("workshop", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkshopMaintenanceType", b =>
                {
                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.Property<int>("MaintenanceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_type_id");

                    b.HasKey("WorkshopId", "MaintenanceTypeId")
                        .HasName("workshop_maintenance_type_pkey");

                    b.HasIndex("MaintenanceTypeId");

                    b.ToTable("workshop_maintenance_type", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkshopWarehouse", b =>
                {
                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.Property<bool>("EarlySelect")
                        .HasColumnType("boolean")
                        .HasColumnName("early_select");

                    b.Property<string>("LibraryPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("library_path")
                        .HasDefaultValueSql("'Built-in'::character varying");

                    b.HasKey("WorkshopId", "WarehouseId")
                        .HasName("workshop_warehouse_pkey");

                    b.ToTable("workshop_warehouse", "core");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.EF.Repositories.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SeconedName")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("Whatsapp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.EF.Repositories.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.EF.Repositories.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.EF.Repositories.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.EF.Repositories.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.AuthenticationProviderParameter", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.AuthenticationProvider", "AuthenticationProvider")
                        .WithMany("AuthenticationProviderParameters")
                        .HasForeignKey("AuthenticationProviderId")
                        .HasConstraintName("authentication_provider_paramet_authentication_provider_id_fkey")
                        .IsRequired();

                    b.Navigation("AuthenticationProvider");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Configuration", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.ConfigurationCategory", "ConfigurationCategory")
                        .WithMany("Configurations")
                        .HasForeignKey("ConfigurationCategoryId")
                        .HasConstraintName("configuration_configuration_category_id_fkey")
                        .IsRequired();

                    b.Navigation("ConfigurationCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ConfigurationCategory", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.ConfigurationCategory", "ParentConfigurationCategory")
                        .WithMany("InverseParentConfigurationCategory")
                        .HasForeignKey("ParentConfigurationCategoryId")
                        .HasConstraintName("configuration_category_parent_configuration_category_id_fkey");

                    b.Navigation("ParentConfigurationCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Dictionary", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Language", "Language")
                        .WithMany("Dictionaries")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("dictionary_language_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Page", "Page")
                        .WithMany("Dictionaries")
                        .HasForeignKey("PageId")
                        .HasConstraintName("dictionary_page_id_fkey")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Division", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.CapitalType", "CapitalType")
                        .WithMany("Divisions")
                        .HasForeignKey("CapitalTypeId")
                        .HasConstraintName("division_capital_type_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Country", "Country")
                        .WithMany("Divisions")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("division_country_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Division", "ParentDivision")
                        .WithMany("InverseParentDivision")
                        .HasForeignKey("ParentDivisionId")
                        .HasConstraintName("division_parent_division_id_fkey");

                    b.Navigation("CapitalType");

                    b.Navigation("Country");

                    b.Navigation("ParentDivision");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItem", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.CodeType", "CodeType")
                        .WithMany("InventoryItems")
                        .HasForeignKey("CodeTypeId")
                        .HasConstraintName("inventory_item_code_type_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemStatus", "InventoryItemStatus")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryItemStatusId")
                        .HasConstraintName("inventory_item_inventory_item_status_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemType", "InventoryItemType")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryItemTypeId")
                        .HasConstraintName("inventory_item_inventory_item_type_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLocation", "InventoryLocation")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryLocationId")
                        .HasConstraintName("inventory_item_inventory_location_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Location", "Location")
                        .WithMany("InventoryItems")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("inventory_item_location_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SystemUser", "SystemUser")
                        .WithMany("InventoryItems")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("inventory_item_system_user_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vendor", "Vendor")
                        .WithMany("InventoryItems")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("inventory_item_vendor_id_fkey")
                        .IsRequired();

                    b.Navigation("CodeType");

                    b.Navigation("InventoryItemStatus");

                    b.Navigation("InventoryItemType");

                    b.Navigation("InventoryLocation");

                    b.Navigation("Location");

                    b.Navigation("SystemUser");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemAssignment", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemAssignments")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("inventory_item_assignment_inventory_item_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemCategory", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemCategory", "ParentInventoryItemCategory")
                        .WithMany("InverseParentInventoryItemCategory")
                        .HasForeignKey("ParentInventoryItemCategoryId")
                        .HasConstraintName("inventory_item_category_parent_inventory_item_category_id_fkey");

                    b.Navigation("ParentInventoryItemCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemCategoryBrand", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Brand", "Brand")
                        .WithMany("InventoryItemCategoryBrands")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("inventory_item_category_brand_brand_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemCategory", "InventoryItemCategory")
                        .WithMany("InventoryItemCategoryBrands")
                        .HasForeignKey("InventoryItemCategoryId")
                        .HasConstraintName("inventory_item_category_brand_inventory_item_category_id_fkey")
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("InventoryItemCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemHistory", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", "MaintenanceItem")
                        .WithMany("InventoryItemHistories")
                        .HasForeignKey("MaintenanceItemId")
                        .HasConstraintName("inventory_item_history_maintenance_item_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "Vehicle")
                        .WithMany("InventoryItemHistories")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("inventory_item_history_vehicle_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceItem");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemReservation", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemReservations")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("inventory_item_reservation_inventory_item_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemStatusInventoryItemType", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemStatus", "InventoryItemStatus")
                        .WithMany("InventoryItemStatusInventoryItemTypes")
                        .HasForeignKey("InventoryItemStatusId")
                        .HasConstraintName("inventory_item_status_inventory_i_inventory_item_status_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemType", "InventoryItemType")
                        .WithMany("InventoryItemStatusInventoryItemTypes")
                        .HasForeignKey("InventoryItemTypeId")
                        .HasConstraintName("inventory_item_status_inventory_ite_inventory_item_type_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryItemStatus");

                    b.Navigation("InventoryItemType");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemStatusLog", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemStatusLogs")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("inventory_item_status_log_inventory_item_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemStatus", "InventoryItemStatus")
                        .WithMany("InventoryItemStatusLogs")
                        .HasForeignKey("InventoryItemStatusId")
                        .HasConstraintName("inventory_item_status_log_inventory_item_status_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("InventoryItemStatus");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemType", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Brand", "Brand")
                        .WithMany("InventoryItemTypes")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_brand_id")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeClassification", "InventoryItemTypeClassification")
                        .WithMany("InventoryItemTypes")
                        .HasForeignKey("InventoryItemTypeClassificationId")
                        .HasConstraintName("inventory_item_type_inventory_item_type_classification_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeUnit", "InventoryItemTypeUnit")
                        .WithMany("InventoryItemTypes")
                        .HasForeignKey("InventoryItemTypeUnitId")
                        .HasConstraintName("inventory_item_type_inventory_item_type_unit_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemCategory", "Inventoryitemcategory")
                        .WithMany("InventoryItemTypes")
                        .HasForeignKey("InventoryitemcategoryId")
                        .HasConstraintName("fk_inventoryitemcategory_id");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Model", "Model")
                        .WithMany("InventoryItemTypes")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fk_model_id");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Warehouse", "Warehouse")
                        .WithMany("InventoryItemTypes")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_warehouse_id")
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Inventoryitemcategory");

                    b.Navigation("InventoryItemTypeClassification");

                    b.Navigation("InventoryItemTypeUnit");

                    b.Navigation("Model");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocation", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLocationLevel", "InventoryLocationLevel")
                        .WithMany("InventoryLocations")
                        .HasForeignKey("InventoryLocationLevelId")
                        .HasConstraintName("inventory_location_inventory_location_level_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLocation", "ParentInventoryLocation")
                        .WithMany("InverseParentInventoryLocation")
                        .HasForeignKey("ParentInventoryLocationId")
                        .HasConstraintName("inventory_location_parent_inventory_location_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Warehouse", "Warehouse")
                        .WithMany("InventoryLocations")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("inventory_location_warehouse_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryLocationLevel");

                    b.Navigation("ParentInventoryLocation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocationLevel", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLocationLevel", "ParentInventoryLocationLevel")
                        .WithMany("InverseParentInventoryLocationLevel")
                        .HasForeignKey("ParentInventoryLocationLevelId")
                        .HasConstraintName("inventory_location_level_parent_inventory_location_level_i_fkey");

                    b.Navigation("ParentInventoryLocationLevel");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLog", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLogOperation", "InventoryLogOperation")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("InventoryLogOperationID")
                        .HasConstraintName("FK_inventory_log_inventory_log_operation_InventoryLogOperation~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLogTable", "InventoryLogTable")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("InventoryLogTableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryLogOperation");

                    b.Navigation("InventoryLogTable");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryTransaction", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Location", "FromLocation")
                        .WithMany("InventoryTransactionFromLocations")
                        .HasForeignKey("FromLocationId")
                        .HasConstraintName("inventory_transaction_from_location_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SystemUser", "SystemUser")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("inventory_transaction_system_user_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Location", "ToLocation")
                        .WithMany("InventoryTransactionToLocations")
                        .HasForeignKey("ToLocationId")
                        .HasConstraintName("inventory_transaction_to_location_id_fkey")
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("SystemUser");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryTransactionDetail", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemStatus", "InventoryItemStatus")
                        .WithMany("InventoryTransactionDetails")
                        .HasForeignKey("InventoryItemStatusId")
                        .HasConstraintName("inventory_transaction_detail_inventory_item_status_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryTransaction", "InventoryTransaction")
                        .WithMany("InventoryTransactionDetails")
                        .HasForeignKey("InventoryTransactionId")
                        .HasConstraintName("inventory_transaction_detail_inventory_transaction_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryItemStatus");

                    b.Navigation("InventoryTransaction");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Location", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("location_location_type_id_fkey")
                        .IsRequired();

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Log", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.LogAction", "LogAction")
                        .WithMany("Logs")
                        .HasForeignKey("LogActionId")
                        .HasConstraintName("log_log_action_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.LogCategory", "LogCategory")
                        .WithMany("Logs")
                        .HasForeignKey("LogCategoryId")
                        .HasConstraintName("log_log_category_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.LogStatus", "LogStatus")
                        .WithMany("Logs")
                        .HasForeignKey("LogStatusId")
                        .HasConstraintName("log_log_status_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SystemUser", "SystemUser")
                        .WithMany("Logs")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("log_system_user_id_fkey")
                        .IsRequired();

                    b.Navigation("LogAction");

                    b.Navigation("LogCategory");

                    b.Navigation("LogStatus");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogCategory", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.LogCategory", "ParentLogCategory")
                        .WithMany("InverseParentLogCategory")
                        .HasForeignKey("ParentLogCategoryId")
                        .HasConstraintName("log_category_parent_log_category_id_fkey");

                    b.Navigation("ParentLogCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogDetail", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Log", "Log")
                        .WithMany("LogDetails")
                        .HasForeignKey("LogId")
                        .HasConstraintName("log_detail_log_id_fkey")
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Maintenance", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceType", "MaintenanceType")
                        .WithMany("Maintenances")
                        .HasForeignKey("MaintenanceTypeId")
                        .HasConstraintName("maintenance_maintenance_type_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.WorkOrder", "WorkOrderNumberNavigation")
                        .WithMany("Maintenances")
                        .HasForeignKey("WorkOrderNumber")
                        .HasConstraintName("maintenance_work_order_number_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("Maintenances")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("maintenance_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceType");

                    b.Navigation("WorkOrderNumberNavigation");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("MaintenanceActions")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("maintenance_action_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionControl", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", "MaintenanceAction")
                        .WithMany("MaintenanceActionControls")
                        .HasForeignKey("MaintenanceActionId")
                        .HasConstraintName("maintenance_action_control_maintenance_action_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleFamily", "VehicleFamily")
                        .WithMany("MaintenanceActionControls")
                        .HasForeignKey("VehicleFamilyId")
                        .HasConstraintName("maintenance_action_control_vehicle_family_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceAction");

                    b.Navigation("VehicleFamily");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionDetail", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", "MaintenanceAction")
                        .WithMany("MaintenanceActionDetails")
                        .HasForeignKey("MaintenanceActionId")
                        .HasConstraintName("maintenance_action_detail_maintenance_action_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceAction");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionTechnicianPosition", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", "MaintenanceAction")
                        .WithMany("MaintenanceActionTechnicianPositions")
                        .HasForeignKey("MaintenanceActionId")
                        .HasConstraintName("maintenance_action_technician_positi_maintenance_action_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.TechnicianPosition", "TechnicianPosition")
                        .WithMany("MaintenanceActionTechnicianPositions")
                        .HasForeignKey("TechnicianPositionId")
                        .HasConstraintName("maintenance_action_technician_posit_technician_position_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceAction");

                    b.Navigation("TechnicianPosition");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceActionDetail", "MaintenanceActionDetail")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("MaintenanceActionDetailId")
                        .HasConstraintName("maintenance_item_maintenance_action_detail_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", "MaintenanceAction")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("MaintenanceActionId")
                        .HasConstraintName("maintenance_item_maintenance_action_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Maintenance", "Maintenance")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("MaintenanceId")
                        .HasConstraintName("maintenance_item_maintenance_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItemStatus", "MaintenanceItemStatus")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("MaintenanceItemStatusId")
                        .HasConstraintName("maintenance_item_maintenance_item_status_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItemType", "MaintenanceItemType")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("MaintenanceItemTypeId")
                        .HasConstraintName("maintenance_item_maintenance_item_type_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", "RelatedMaintenanceItem")
                        .WithMany("InverseRelatedMaintenanceItem")
                        .HasForeignKey("RelatedMaintenanceItemId")
                        .HasConstraintName("maintenance_item_related_maintenance_item_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Technician", "Technician")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("maintenance_item_technician_id_fkey")
                        .IsRequired();

                    b.Navigation("Maintenance");

                    b.Navigation("MaintenanceAction");

                    b.Navigation("MaintenanceActionDetail");

                    b.Navigation("MaintenanceItemStatus");

                    b.Navigation("MaintenanceItemType");

                    b.Navigation("RelatedMaintenanceItem");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemInventoryItem", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", "MaintenanceItem")
                        .WithMany("MaintenanceItemInventoryItems")
                        .HasForeignKey("MaintenanceItemId")
                        .HasConstraintName("maintenance_item_inventory_item_maintenance_item_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceItem");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemStatus", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("MaintenanceItemStatuses")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("maintenance_item_status_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceQuestion", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("MaintenanceQuestions")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("maintenance_question_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceQuestionValue", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Maintenance", "Maintenance")
                        .WithMany("MaintenanceQuestionValues")
                        .HasForeignKey("MaintenanceId")
                        .HasConstraintName("maintenance_question_value_maintenance_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceQuestion", "MaintenanceQuestion")
                        .WithMany("MaintenanceQuestionValues")
                        .HasForeignKey("MaintenanceQuestionId")
                        .HasConstraintName("maintenance_question_value_maintenance_question_id_fkey")
                        .IsRequired();

                    b.Navigation("Maintenance");

                    b.Navigation("MaintenanceQuestion");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Model", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("model_brand_id_fkey")
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Parameter", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.ParameterType", "ParameterType")
                        .WithMany("Parameters")
                        .HasForeignKey("ParameterTypeId")
                        .HasConstraintName("parameter_parameter_type_id_fkey")
                        .IsRequired();

                    b.Navigation("ParameterType");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterConstraint", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.ConstraintType", "ConstraintType")
                        .WithMany("ParameterConstraints")
                        .HasForeignKey("ConstraintTypeId")
                        .HasConstraintName("parameter_constraint_constraint_type_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Parameter", "Parameter")
                        .WithMany("ParameterConstraints")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("parameter_constraint_parameter_id_fkey")
                        .IsRequired();

                    b.Navigation("ConstraintType");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterEntity", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Entity", "Entity")
                        .WithMany("ParameterEntities")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("parameter_entity_entity_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Parameter", "Parameter")
                        .WithMany("ParameterEntities")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("parameter_entity_parameter_id_fkey")
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterListValue", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Parameter", "Parameter")
                        .WithMany("ParameterListValues")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("parameter_list_value_parameter_id_fkey")
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterTypeConstraintType", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.ConstraintType", "ConstraintType")
                        .WithMany("ParameterTypeConstraintTypes")
                        .HasForeignKey("ConstraintTypeId")
                        .HasConstraintName("parameter_type_constraint_type_constraint_type_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.ParameterType", "ParameterType")
                        .WithMany("ParameterTypeConstraintTypes")
                        .HasForeignKey("ParameterTypeId")
                        .HasConstraintName("parameter_type_constraint_type_parameter_type_id_fkey")
                        .IsRequired();

                    b.Navigation("ConstraintType");

                    b.Navigation("ParameterType");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterValue", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Parameter", "Parameter")
                        .WithMany("ParameterValues")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("parameter_value_parameter_id_fkey")
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.PermissionParameter", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Permission", "Permission")
                        .WithMany("PermissionParameters")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("permission_parameter_permission_id_fkey")
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Schedule", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "Vehicle")
                        .WithMany("Schedules")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_schedule_vehicls")
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SecurityGroupPermission", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Permission", "Permission")
                        .WithMany("SecurityGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("security_group_permission_permission_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SecurityGroup", "SecurityGroup")
                        .WithMany("SecurityGroupPermissions")
                        .HasForeignKey("SecurityGroupId")
                        .HasConstraintName("security_group_permission_security_group_id_fkey")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("SecurityGroup");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUser", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.AuthenticationProvider", "AuthenticationProvider")
                        .WithMany("SystemUsers")
                        .HasForeignKey("AuthenticationProviderId")
                        .HasConstraintName("system_user_authentication_provider_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.UserCategory", "UserCategory")
                        .WithMany("SystemUsers")
                        .HasForeignKey("UserCategoryId")
                        .HasConstraintName("system_user_user_category_id_fkey")
                        .IsRequired();

                    b.Navigation("AuthenticationProvider");

                    b.Navigation("UserCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserLanguage", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Language", "Language")
                        .WithMany("SystemUserLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("system_user_language_language_id_fkey")
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserPermission", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Permission", "Permission")
                        .WithMany("SystemUserPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("system_user_permission_permission_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SystemUser", "SystemUser")
                        .WithMany("SystemUserPermissions")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("system_user_permission_system_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserSecurityGroup", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SecurityGroup", "SecurityGroup")
                        .WithMany("SystemUserSecurityGroups")
                        .HasForeignKey("SecurityGroupId")
                        .HasConstraintName("system_user_security_group_security_group_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SystemUser", "SystemUser")
                        .WithMany("SystemUserSecurityGroups")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("system_user_security_group_system_user_id_fkey")
                        .IsRequired();

                    b.Navigation("SecurityGroup");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUserTerminal", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.SystemUser", "SystemUser")
                        .WithMany("SystemUserTerminals")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("system_user_terminal_system_user_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Terminal", "Terminal")
                        .WithMany("SystemUserTerminals")
                        .HasForeignKey("TerminalId")
                        .HasConstraintName("system_user_terminal_terminal_id_fkey")
                        .IsRequired();

                    b.Navigation("SystemUser");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Technician", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.CostCenter", "CostCenter")
                        .WithMany("Technicians")
                        .HasForeignKey("CostCenterId")
                        .HasConstraintName("technician_cost_center_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.TechnicianCompany", "TechnicianCompany")
                        .WithMany("Technicians")
                        .HasForeignKey("TechnicianCompanyId")
                        .HasConstraintName("technician_technician_company_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.TechnicianPosition", "TechnicianPosition")
                        .WithMany("Technicians")
                        .HasForeignKey("TechnicianPositionId")
                        .HasConstraintName("technician_technician_position_id_fkey")
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("TechnicianCompany");

                    b.Navigation("TechnicianPosition");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianAttendance", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.AttendanceStatus", "AttendanceStatus")
                        .WithMany("TechnicianAttendances")
                        .HasForeignKey("AttendanceStatusId")
                        .HasConstraintName("technician_attendance_attendance_status_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Shift", "Shift")
                        .WithMany("TechnicianAttendances")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("technician_attendance_shift_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Technician", "Technician")
                        .WithMany("TechnicianAttendances")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("technician_attendance_technician_id_fkey")
                        .IsRequired();

                    b.Navigation("AttendanceStatus");

                    b.Navigation("Shift");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianAttendanceLog", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.AttendanceStatus", "AttendanceStatus")
                        .WithMany()
                        .HasForeignKey("AttendanceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.TechnicianAttendanceStatusLog", "TechnicianAttendanceStatusLog")
                        .WithMany()
                        .HasForeignKey("TechnicianAttendanceStatusLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.TechnicianAttendance", "TechnicianAttendance")
                        .WithMany("TechnicianAttendanceLogs")
                        .HasForeignKey("TechnicianId", "EventDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceStatus");

                    b.Navigation("Shift");

                    b.Navigation("TechnicianAttendance");

                    b.Navigation("TechnicianAttendanceStatusLog");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TireTest", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", "MaintenanceItem")
                        .WithMany("TireTests")
                        .HasForeignKey("MaintenanceItemId")
                        .HasConstraintName("tire_test_maintenance_item_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "Vehicle")
                        .WithMany("TireTests")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("tire_test_vehicle_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceItem");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.UserCategory", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.UserCategory", "ParentUserCategory")
                        .WithMany("InverseParentUserCategory")
                        .HasForeignKey("ParentUserCategoryId")
                        .HasConstraintName("user_category_parent_user_category_id_fkey");

                    b.Navigation("ParentUserCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Vehicle", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "AttachedVehicle")
                        .WithOne("InverseAttachedVehicle")
                        .HasForeignKey("RepositoryPatternWithUOW.Core.Models.Vehicle", "AttachedVehicleId")
                        .HasConstraintName("vehicle_attached_vehicle_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.CostCenter", "CostCenter")
                        .WithMany("Vehicles")
                        .HasForeignKey("CostCenterId")
                        .HasConstraintName("vehicle_cost_center_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.TireSize", "TireSize")
                        .WithMany("Vehicles")
                        .HasForeignKey("TireSizeId")
                        .HasConstraintName("vehicle_tire_size_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleBrand", "VehicleBrand")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleBrandId")
                        .HasConstraintName("vehicle_vehicle_brand_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleDepartment", "VehicleDepartment")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleDepartmentId")
                        .HasConstraintName("vehicle_vehicle_department_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleFamily", "VehicleFamily")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleFamilyId")
                        .HasConstraintName("vehicle_vehicle_family_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleOwner", "VehicleOwner")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleOwnerId")
                        .HasConstraintName("vehicle_vehicle_owner_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleStatus", "VehicleStatus")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleStatusId")
                        .HasConstraintName("vehicle_vehicle_status_id_fkey")
                        .IsRequired();

                    b.Navigation("AttachedVehicle");

                    b.Navigation("CostCenter");

                    b.Navigation("TireSize");

                    b.Navigation("VehicleBrand");

                    b.Navigation("VehicleDepartment");

                    b.Navigation("VehicleFamily");

                    b.Navigation("VehicleOwner");

                    b.Navigation("VehicleStatus");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleAttachment", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "AttachedVehicle")
                        .WithMany("VehicleAttachmentAttachedVehicles")
                        .HasForeignKey("AttachedVehicleId")
                        .HasConstraintName("vehicle_attachment_attached_vehicle_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleAttachmentVehicles")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("vehicle_attachment_vehicle_id_fkey")
                        .IsRequired();

                    b.Navigation("AttachedVehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleBrand", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleFamily", "VehicleFamily")
                        .WithMany("VehicleBrands")
                        .HasForeignKey("VehicleFamilyId")
                        .HasConstraintName("vehicle_brand_vehicle_family_id_fkey")
                        .IsRequired();

                    b.Navigation("VehicleFamily");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleFamily", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleFamily", "ParentVehicleFamily")
                        .WithMany("InverseParentVehicleFamily")
                        .HasForeignKey("ParentVehicleFamilyId")
                        .HasConstraintName("vehicle_family_parent_vehicle_family_id_fkey");

                    b.Navigation("ParentVehicleFamily");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleLicense", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleLicenses")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("vehicle_license_vehicle_id_fkey")
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleOwner", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.VehicleDepartment", "VehicleDepartment")
                        .WithMany("VehicleOwners")
                        .HasForeignKey("VehicleDepartmentId")
                        .HasConstraintName("fk_vehicle_department_owner");

                    b.Navigation("VehicleDepartment");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleTire", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", "MaintenanceItem")
                        .WithMany("VehicleTires")
                        .HasForeignKey("MaintenanceItemId")
                        .HasConstraintName("vehicle_tire_maintenance_item_id_fkey");

                    b.Navigation("MaintenanceItem");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Warehouse", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Division", "Division")
                        .WithMany("Warehouses")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("warehouse_division_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryLocationLevel", "InventoryLocationLevel")
                        .WithMany("Warehouses")
                        .HasForeignKey("InventoryLocationLevelId")
                        .HasConstraintName("warehouse_inventory_location_level_id_fkey");

                    b.Navigation("Division");

                    b.Navigation("InventoryLocationLevel");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WarehouseInventoryItemTypeClassification", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeClassification", "InventoryItemTypeClassification")
                        .WithMany("WarehouseInventoryItemTypeClassifications")
                        .HasForeignKey("InventoryItemTypeClassificationId")
                        .HasConstraintName("warehouse_inventory_item_type_inventory_item_type_classifi_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseInventoryItemTypeClassifications")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("warehouse_inventory_item_type_classification_warehouse_id_fkey")
                        .IsRequired();

                    b.Navigation("InventoryItemTypeClassification");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WarehousePermission", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Warehouse", "TargetWarehouse")
                        .WithMany("WarehousePermissionTargetWarehouses")
                        .HasForeignKey("TargetWarehouseId")
                        .HasConstraintName("warehouse_permission_target_warehouse_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Warehouse", "Warehouse")
                        .WithMany("WarehousePermissionWarehouses")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("warehouse_permission_warehouse_id_fkey")
                        .IsRequired();

                    b.Navigation("TargetWarehouse");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkOrder", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceFleet", "MaintenanceFleet")
                        .WithMany("WorkOrders")
                        .HasForeignKey("MaintenanceFleetId")
                        .HasConstraintName("work_order_maintenance_fleet_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Schedule", "Schedule")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("work_order_schedule_id_fkey");

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Vehicle", "Vehicle")
                        .WithMany("WorkOrders")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("work_order_vehicle_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceFleet");

                    b.Navigation("Schedule");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkOrderWorkshop", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.WorkOrder", "WorkOrderNumberNavigation")
                        .WithMany("WorkOrderWorkshops")
                        .HasForeignKey("WorkOrderNumber")
                        .HasConstraintName("work_order_workshop_work_order_number_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("WorkOrderWorkshops")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("work_order_workshop_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("WorkOrderNumberNavigation");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkshopMaintenanceType", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.MaintenanceType", "MaintenanceType")
                        .WithMany("WorkshopMaintenanceTypes")
                        .HasForeignKey("MaintenanceTypeId")
                        .HasConstraintName("workshop_maintenance_type_maintenance_type_id_fkey")
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("WorkshopMaintenanceTypes")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("workshop_maintenance_type_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("MaintenanceType");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkshopWarehouse", b =>
                {
                    b.HasOne("RepositoryPatternWithUOW.Core.Models.Workshop", "Workshop")
                        .WithMany("WorkshopWarehouses")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("workshop_warehouse_workshop_id_fkey")
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.AttendanceStatus", b =>
                {
                    b.Navigation("TechnicianAttendances");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.AuthenticationProvider", b =>
                {
                    b.Navigation("AuthenticationProviderParameters");

                    b.Navigation("SystemUsers");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Brand", b =>
                {
                    b.Navigation("InventoryItemCategoryBrands");

                    b.Navigation("InventoryItemTypes");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.CapitalType", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.CodeType", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ConfigurationCategory", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("InverseParentConfigurationCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ConstraintType", b =>
                {
                    b.Navigation("ParameterConstraints");

                    b.Navigation("ParameterTypeConstraintTypes");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.CostCenter", b =>
                {
                    b.Navigation("Technicians");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Country", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Division", b =>
                {
                    b.Navigation("InverseParentDivision");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Entity", b =>
                {
                    b.Navigation("ParameterEntities");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItem", b =>
                {
                    b.Navigation("InventoryItemAssignments");

                    b.Navigation("InventoryItemReservations");

                    b.Navigation("InventoryItemStatusLogs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemCategory", b =>
                {
                    b.Navigation("InventoryItemCategoryBrands");

                    b.Navigation("InventoryItemTypes");

                    b.Navigation("InverseParentInventoryItemCategory");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemStatus", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryItemStatusInventoryItemTypes");

                    b.Navigation("InventoryItemStatusLogs");

                    b.Navigation("InventoryTransactionDetails");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemType", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryItemStatusInventoryItemTypes");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeClassification", b =>
                {
                    b.Navigation("InventoryItemTypes");

                    b.Navigation("WarehouseInventoryItemTypeClassifications");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryItemTypeUnit", b =>
                {
                    b.Navigation("InventoryItemTypes");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocation", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("InverseParentInventoryLocation");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLocationLevel", b =>
                {
                    b.Navigation("InventoryLocations");

                    b.Navigation("InverseParentInventoryLocationLevel");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLogOperation", b =>
                {
                    b.Navigation("InventoryLogs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryLogTable", b =>
                {
                    b.Navigation("InventoryLogs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.InventoryTransaction", b =>
                {
                    b.Navigation("InventoryTransactionDetails");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Language", b =>
                {
                    b.Navigation("Dictionaries");

                    b.Navigation("SystemUserLanguages");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Location", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryTransactionFromLocations");

                    b.Navigation("InventoryTransactionToLocations");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Log", b =>
                {
                    b.Navigation("LogDetails");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogAction", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogCategory", b =>
                {
                    b.Navigation("InverseParentLogCategory");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.LogStatus", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Maintenance", b =>
                {
                    b.Navigation("MaintenanceItems");

                    b.Navigation("MaintenanceQuestionValues");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceAction", b =>
                {
                    b.Navigation("MaintenanceActionControls");

                    b.Navigation("MaintenanceActionDetails");

                    b.Navigation("MaintenanceActionTechnicianPositions");

                    b.Navigation("MaintenanceItems");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceActionDetail", b =>
                {
                    b.Navigation("MaintenanceItems");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceFleet", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItem", b =>
                {
                    b.Navigation("InventoryItemHistories");

                    b.Navigation("InverseRelatedMaintenanceItem");

                    b.Navigation("MaintenanceItemInventoryItems");

                    b.Navigation("TireTests");

                    b.Navigation("VehicleTires");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemStatus", b =>
                {
                    b.Navigation("MaintenanceItems");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceItemType", b =>
                {
                    b.Navigation("MaintenanceItems");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceQuestion", b =>
                {
                    b.Navigation("MaintenanceQuestionValues");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.MaintenanceType", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("WorkshopMaintenanceTypes");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Model", b =>
                {
                    b.Navigation("InventoryItemTypes");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Page", b =>
                {
                    b.Navigation("Dictionaries");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Parameter", b =>
                {
                    b.Navigation("ParameterConstraints");

                    b.Navigation("ParameterEntities");

                    b.Navigation("ParameterListValues");

                    b.Navigation("ParameterValues");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.ParameterType", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("ParameterTypeConstraintTypes");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Permission", b =>
                {
                    b.Navigation("PermissionParameters");

                    b.Navigation("SecurityGroupPermissions");

                    b.Navigation("SystemUserPermissions");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Schedule", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SecurityGroup", b =>
                {
                    b.Navigation("SecurityGroupPermissions");

                    b.Navigation("SystemUserSecurityGroups");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Shift", b =>
                {
                    b.Navigation("TechnicianAttendances");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.SystemUser", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("Logs");

                    b.Navigation("SystemUserPermissions");

                    b.Navigation("SystemUserSecurityGroups");

                    b.Navigation("SystemUserTerminals");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Technician", b =>
                {
                    b.Navigation("MaintenanceItems");

                    b.Navigation("TechnicianAttendances");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianAttendance", b =>
                {
                    b.Navigation("TechnicianAttendanceLogs");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianCompany", b =>
                {
                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TechnicianPosition", b =>
                {
                    b.Navigation("MaintenanceActionTechnicianPositions");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Terminal", b =>
                {
                    b.Navigation("SystemUserTerminals");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.TireSize", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.UserCategory", b =>
                {
                    b.Navigation("InverseParentUserCategory");

                    b.Navigation("SystemUsers");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Vehicle", b =>
                {
                    b.Navigation("InventoryItemHistories");

                    b.Navigation("InverseAttachedVehicle");

                    b.Navigation("Schedules");

                    b.Navigation("TireTests");

                    b.Navigation("VehicleAttachmentAttachedVehicles");

                    b.Navigation("VehicleAttachmentVehicles");

                    b.Navigation("VehicleLicenses");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleBrand", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleDepartment", b =>
                {
                    b.Navigation("VehicleOwners");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleFamily", b =>
                {
                    b.Navigation("InverseParentVehicleFamily");

                    b.Navigation("MaintenanceActionControls");

                    b.Navigation("VehicleBrands");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleOwner", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.VehicleStatus", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Vendor", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Warehouse", b =>
                {
                    b.Navigation("InventoryItemTypes");

                    b.Navigation("InventoryLocations");

                    b.Navigation("WarehouseInventoryItemTypeClassifications");

                    b.Navigation("WarehousePermissionTargetWarehouses");

                    b.Navigation("WarehousePermissionWarehouses");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.WorkOrder", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("WorkOrderWorkshops");
                });

            modelBuilder.Entity("RepositoryPatternWithUOW.Core.Models.Workshop", b =>
                {
                    b.Navigation("MaintenanceActions");

                    b.Navigation("MaintenanceItemStatuses");

                    b.Navigation("MaintenanceQuestions");

                    b.Navigation("Maintenances");

                    b.Navigation("WorkOrderWorkshops");

                    b.Navigation("WorkshopMaintenanceTypes");

                    b.Navigation("WorkshopWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
